{"mappings":";ACOA,mBAAmB;IACf,KAAK,EAAE,MAAM,GAAG,QAAQ,GAAG,SAAS,CAAC;CACxC,CAAC;AAEF;IACI,aAAa,IAAA;IACb,MAAM,IAAA;IACN,SAAS,IAAA;CACZ;AAED,kBAAmB,UAAU,SAAS,EAAE;IACpC,IAAI,EAAE,MAAM,CAAC;IAEb,MAAM,EAAE,MAAM,CAAC;gBAMH,IAAI,EAAE,MAAM;IAQxB,IAAI,CAAC,GAAG,EAAE,UAAU,EAAE,OAAO,CAAC,EAAE,WAAW,GAAG,IAAI;IAiBlD,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,KAAK,GAAG,GAAG,GAAG,EAAE,GAAG,iBAAiB,GAAG,UAAU;IAoCjF,OAAO,IAAI,IAAI;CAIlB","sources":["src/src/helpers.ts","src/src/index.ts","src/index.ts"],"sourcesContent":[null,null,"import { Proxserve } from 'proxserve';\nimport type {\n\tProxserveInstance,\n} from 'proxserve';\nimport { useEffect, useReducer } from 'react';\nimport { validateParsePathsFunction, quickUidGenerate, makePathGeneratorProxy } from './helpers';\n\ntype initOptions = {\n    trace: 'none' | 'normal' | 'verbose';\n};\n\nenum STATUS {\n    uninitialized,\n    active,\n    destroyed,\n}\n\nexport class PRSM <TargetType extends {}>{\n    name: string;\n\n    status: STATUS;\n\n    private target: TargetType;\n\n    private proxy: ProxserveInstance & TargetType;\n\n    constructor(name: string) {\n        this.name = name;\n        this.status = STATUS.uninitialized;\n        // initialize as a fallback\n        this.target = {} as TargetType;\n        this.proxy = Proxserve.make<TargetType>(this.target, {name});\n    }\n\n    init(obj: TargetType, options?: initOptions): void {\n        if (typeof obj === 'object' && obj !== null) { // whether it's an object or array\n            this.destroy();\n            this.target = obj;\n            this.proxy = Proxserve.make<TargetType>(\n                this.target as {},\n                {\n                    name: this.name,\n                    debug: {\n                        trace: options?.trace || 'none'\n                    }\n                },\n            )\n            this.status = STATUS.active;\n        }\n    }\n\n    useGet(pathsFunction?: (obj: any) => any | any[]): ProxserveInstance & TargetType {\n        // https://reactjs.org/docs/hooks-faq.html#is-there-something-like-forceupdate\n        const [, forceUpdate] = useReducer(x => x + 1, 0);\n\n        let paths2observe: string[] | undefined;\n        if (typeof pathsFunction === 'function') {\n            const pathGeneratorObject = makePathGeneratorProxy();\n            const output = pathsFunction(pathGeneratorObject);\n            paths2observe = validateParsePathsFunction(output);\n        }\n\n        useEffect(() => {\n            if (!paths2observe || this.status === STATUS.destroyed) {\n                return;\n            }\n\n            // should be random enough for us\n            const randomId = quickUidGenerate();\n\n            paths2observe.forEach((path) => {\n                this.proxy.on({\n                    event: 'change',\n                    path,\n                    id: randomId,\n                    listener: forceUpdate,\n                });\n            });\n\n            return function cleanup() {\n                this.proxy.removeListener({ id: randomId })\n            }\n        }, []);\n\n        return this.proxy;\n    }\n\n    destroy(): void {\n        Proxserve.destroy(this.proxy);\n        this.status = STATUS.destroyed;\n    }\n}"],"names":[],"version":3,"file":"index.d.ts.map"}